{"version":3,"sources":["components/Filter.js","components/Table.js","components/FileUpload.js","App.js","serviceWorker.js","index.js"],"names":["Filter","handleFilter","className","type","id","defaultValue","onChange","Table","data","length","map","details","i","key","name","address","city","country","zipcode","FileUpload","fileUpload","App","state","loading","fileDetails","errorMessage","delimeter","rows","formData","FormData","fileField","document","querySelector","append","files","setState","fetch","method","body","then","res","json","response","catch","err","e","targetID","target","getAttribute","value","replace","test","tableData","contactObject","Number","deliSplit","split","push","filter","val","contactDetails","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"kNA0BeA,EAxBA,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,aACd,OACI,yBAAKC,UAAU,WACf,6BACG,yBAAKA,UAAU,OACZ,yBAAKA,UAAU,YACb,4CAGA,2BAAOC,KAAK,OAAOD,UAAU,eAAeE,GAAG,YAAYC,aAAa,IAAIC,SAAUL,KAG1F,yBAAKC,UAAU,YACX,uCAGA,2BAAOC,KAAK,SAASD,UAAU,eAAeE,GAAG,OAAOC,aAAa,IAAIC,SAAUL,MAG3F,+BCkBOM,EApCD,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMP,EAAmB,EAAnBA,aACrB,OACE,6BACE,kBAAC,EAAD,CAAQA,aAAcA,IACrBO,EAAKC,OAAS,EACb,uBAAGP,UAAU,uBAAb,4BAEA,2BAAOA,UAAU,uBACf,2BAAOA,UAAU,cACf,4BACE,oCACA,uCACA,oCACA,uCACA,yCAGJ,+BACGM,EAAKE,KAAI,SAACC,EAASC,GAClB,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAQG,MACb,4BAAKH,EAAQI,SACb,4BAAKJ,EAAQK,MACb,4BAAKL,EAAQM,SACb,4BAAKN,EAAQO,iBCXhBC,EAfI,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WACjB,OACI,6BACA,6BACA,kEACA,2BACEjB,KAAK,OACLD,UAAU,eACVE,GAAG,OACHE,SAAUc,MC6GLC,E,4MAnHbC,MAAQ,CACNC,SAAS,EACTC,YAAa,KACbC,aAAc,KACdC,UAAW,IACXC,KAAM,G,EAGRP,WAAa,WACX,IAAMQ,EAAW,IAAIC,SACfC,EAAYC,SAASC,cAAc,sBACzCJ,EAASK,OAAO,QAASH,EAAUI,MAAM,IAEzC,EAAKC,SAAS,CAAEZ,SAAS,IACzBa,MAAM,uCAAwC,CAC5CC,OAAQ,OACRC,KAAMV,IAELW,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACDA,EAASjC,OAAS,EACpB,EAAK0B,SAAS,CACZZ,SAAS,EACTE,aAAc,iCAGhB,EAAKU,SAAS,CAAEX,YAAakB,EAAUnB,SAAS,OAGnDoB,OAAM,SAACC,GAAD,OACL,EAAKT,SAAS,CACZV,aACE,8FACFF,SAAS,Q,EAKjBtB,aAAe,SAAC4C,GACd,IAAIC,EAAWD,EAAEE,OAAOC,aAAa,MACjCC,EAAQJ,EAAEE,OAAOE,MAAMC,QAAQ,MAAO,IAC1C,GAAc,KAAVD,GAA6B,cAAbH,EAA0B,CACzB,uBACFK,KAAKF,IACpB,EAAKd,SAAS,CAAET,UAAWuB,QAEV,KAAVA,GAA6B,SAAbH,EACzB,EAAKX,SAAS,CAAER,KAAMsB,IAEtB,EAAKd,SAAL,eAAiBW,EAAWG,K,EAIhCG,UAAY,SAAC5C,EAAMkB,EAAWC,GAC5B,IAAI0B,EAAgB,GACpB,GAAkB,KAAd3B,GAAoB4B,OAAO3B,GAAQ,EACrC,IAAK,IAAIf,EAAI,EAAGA,EAAIJ,EAAKC,OAAQG,IAAK,CACpC,IAAI2C,EAAY/C,EAAKI,GAAG4C,MAAM9B,GAE1B6B,EAAU9C,OAAS,GACrB4C,EAAcI,KAAK,CACjB3C,KAAMyC,EAAU,GAChBxC,QAASwC,EAAU,GACnBvC,KAAMuC,EAAU,GAChBtC,QAASsC,EAAU,GACnBrC,QAASqC,EAAU,KAK3B,OAAOF,EAAcK,QAAO,SAACC,EAAK/C,GAAN,OAAYA,EAAIe,M,uDAI5C,IAAIiC,EACyB,OAA3BC,KAAKvC,MAAME,YACPqC,KAAKT,UACHS,KAAKvC,MAAME,YACXqC,KAAKvC,MAAMI,UACXmC,KAAKvC,MAAMK,MAEb,KAEN,OACE,yBAAKzB,UAAU,0BAGb,yBAAKA,UAAU,OAIb,yBAAKA,UAAU,wBACd2D,KAAKvC,MAAMC,QACZ,uBAAGrB,UAAU,uBAAb,0BACE,KAEH2D,KAAKvC,MAAMG,aACV,uBAAGvB,UAAU,sBAAsB2D,KAAKvC,MAAMG,cACxC,KAEJ,wBAAIvB,UAAU,eAAd,iBAEA,8BACE,kBAAC,EAAD,CAAYkB,WAAYyC,KAAKzC,cAEH,OAA3ByC,KAAKvC,MAAME,YACV,kBAAC,EAAD,CAAOhB,KAAMoD,EAAgB3D,aAAc4D,KAAK5D,eAC9C,Y,GA5GE6D,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxC,SAASyC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAmC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5d8b69dc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = ({ handleFilter}) => {\r\n    return (\r\n        <div className=\"filters\">\r\n        <br/>\r\n           <div className=\"row\">\r\n              <div className=\"col-md-6\">\r\n                <label>\r\n                   Delimeter\r\n                </label>\r\n                <input type=\"text\" className=\"form-control\" id=\"delimeter\" defaultValue=\",\" onChange={handleFilter}/>\r\n            </div>\r\n            \r\n            <div className=\"col-md-6\">\r\n                <label>\r\n                   Rows\r\n                </label>\r\n                <input type=\"number\" className=\"form-control\" id=\"rows\" defaultValue=\"2\" onChange={handleFilter}/>\r\n              </div>\r\n        </div>\r\n        <br/>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Filter","import React from \"react\";\r\nimport Filter from \"./Filter\";\r\n\r\nconst Table = ({ data, handleFilter }) => {\r\n  return (\r\n    <div>\r\n      <Filter handleFilter={handleFilter} />\r\n      {data.length < 1 ? (\r\n        <p className=\"alert alert-warning\">No data found try again.</p>\r\n      ) : (\r\n        <table className=\"table table-striped\">\r\n          <thead className=\"thead-dark\">\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Address</th>\r\n              <th>City</th>\r\n              <th>Country</th>\r\n              <th>Zipcode</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.map((details, i) => {\r\n              return (\r\n                <tr key={i}>\r\n                  <td>{details.name}</td>\r\n                  <td>{details.address}</td>\r\n                  <td>{details.city}</td>\r\n                  <td>{details.country}</td>\r\n                  <td>{details.zipcode}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React from 'react'\r\n\r\nconst FileUpload = ({fileUpload}) => {\r\n    return (\r\n        <div>\r\n        <br />\r\n        <label>Upload a .txt file to continue.</label>\r\n        <input\r\n          type=\"file\"\r\n          className=\"form-control\"\r\n          id=\"file\"\r\n          onChange={fileUpload}\r\n        />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default FileUpload;","import React from \"react\";\r\nimport Table from \"./components/Table\";\r\nimport FileUpload from \"./components/FileUpload\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    loading: false,\r\n    fileDetails: null,\r\n    errorMessage: null,\r\n    delimeter: \",\",\r\n    rows: 2,\r\n  };\r\n\r\n  fileUpload = () => {\r\n    const formData = new FormData();\r\n    const fileField = document.querySelector('input[type=\"file\"]');\r\n    formData.append(\"files\", fileField.files[0]);\r\n\r\n    this.setState({ loading: true });\r\n    fetch(\"http://localhost:3000/fileprocessing\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n    })\r\n      .then((res) => res.json())\r\n      .then((response) => {\r\n        if (response.length < 1) {\r\n          this.setState({\r\n            loading: false,\r\n            errorMessage: \"No data in the file uploaded\",\r\n          });\r\n        } else {\r\n          this.setState({ fileDetails: response, loading: false });\r\n        }\r\n      })\r\n      .catch((err) =>\r\n        this.setState({\r\n          errorMessage:\r\n            \"There was an issue while processing your request please make sure there is data in the file\",\r\n          loading: false,\r\n        })\r\n      );\r\n  };\r\n\r\n  handleFilter = (e) => {\r\n    let targetID = e.target.getAttribute(\"id\");\r\n    let value = e.target.value.replace(/\\s/g, \"\");\r\n    if (value !== \"\" && targetID === \"delimeter\") {\r\n      let symbolsRegex = /[$-/:-?{-~!\"^_`\\[\\]]/;\r\n      if (symbolsRegex.test(value)) {\r\n        this.setState({ delimeter: value });\r\n      }\r\n    } else if (value !== \"\" && targetID === \"rows\") {\r\n      this.setState({ rows: value });\r\n    } else {\r\n      this.setState({ [targetID]: value });\r\n    }\r\n  };\r\n\r\n  tableData = (data, delimeter, rows) => {\r\n    let contactObject = [];\r\n    if (delimeter !== \"\" && Number(rows) > 0) {\r\n      for (let i = 0; i < data.length; i++) {\r\n        let deliSplit = data[i].split(delimeter);\r\n\r\n        if (deliSplit.length > 1) {\r\n          contactObject.push({\r\n            name: deliSplit[0],\r\n            address: deliSplit[1],\r\n            city: deliSplit[2],\r\n            country: deliSplit[3],\r\n            zipcode: deliSplit[4],\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return contactObject.filter((val, i) => i < rows);\r\n  };\r\n\r\n  render() {\r\n    let contactDetails =\r\n      this.state.fileDetails !== null\r\n        ? this.tableData(\r\n            this.state.fileDetails,\r\n            this.state.delimeter,\r\n            this.state.rows\r\n          )\r\n        : null;\r\n\r\n    return (\r\n      <div className=\"container customSizing\">\r\n        \r\n       \r\n        <div className=\"row\">\r\n\r\n        \r\n          \r\n          <div className=\"col-md-8 offset-md-2\">\r\n          {this.state.loading ? (\r\n          <p className=\"alert alert-warning\">Loading please wait...</p>\r\n        ) : null}\r\n\r\n        {this.state.errorMessage ? (\r\n          <p className=\"alert alert-danger\">{this.state.errorMessage}</p>\r\n            ) : null}\r\n            \r\n            <h2 className=\"page-header\">Contacts list</h2>\r\n\r\n            <form>\r\n              <FileUpload fileUpload={this.fileUpload}/>\r\n            </form>\r\n            {this.state.fileDetails !== null ? (\r\n              <Table data={contactDetails} handleFilter={this.handleFilter} />\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\n\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}